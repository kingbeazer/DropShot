@using System.ComponentModel.DataAnnotations
@using DropShot.Models;
@using DropShot.Data;

@page "/weather"
@rendermode InteractiveServer
@inject MyDbContext DbContext

<EditForm Model="model" FormName="SubmitScoreForm" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Field 1</label>
        <InputSelect @bind-Value="model.Player1" class="form-control">
            <option>***Select***</option>
            @foreach (var item in Items)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Field 2</label>
        <InputSelect @bind-Value="model.Player2" class="form-control">
            <option>***Select***</option>

            @foreach (var item in Items)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@if (isSaved)
{
    <div class="alert alert-success mt-3">@newRatingA_ADV</div>
}
 
@code {
    private Score model = new();
    private bool isSaved;
    private bool isClicked;
    double newRatingA_ADV;

    public class MyItem { public int Id { get; set; } public string Name { get; set; } }

    private List<MyItem> Items = new()
    {
        new MyItem{Id=1000, Name="Alan Beattie"},
        new MyItem{Id=2000, Name="James Daniel"},
        new MyItem{Id=2000, Name="Andrew Beattie"},
        new MyItem{Id=2000, Name="Ron Beattie"},
    };

    private async Task HandleValidSubmit()
    {
        int gamesWonA = int.Parse( model.Player1), totalGames = int.Parse( model.Player2);
        double scoreA = (double)gamesWonA / totalGames; // 0.6

        double ratingA = 1500, ratingB = 1400;
        double expectedA = EloCalculator.ExpectedScore(ratingA, ratingB);
        double K = 30;

        // Basic update
        double newRatingA = EloCalculator.UpdateRating(ratingA, expectedA, scoreA, K);

        // Advanced update with margin
        double movm = EloCalculator.MarginOfVictoryMultiplier(3, 2, ratingA, ratingB);
        newRatingA_ADV = EloCalculator.UpdateRating(ratingA, expectedA, scoreA, K, movm);

        isClicked = true;
        DbContext.Score.Add(model);
        if (model.Player1 == null || model.Player2 == null)
        {
            isSaved = false;
            return;    
        }
        await DbContext.SaveChangesAsync();
        isSaved = true;
        model = new Score(); // Clear form
    }
}